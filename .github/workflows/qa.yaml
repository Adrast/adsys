name: QA
on:
  push:
    branches:
    - main
  pull_request:
env:
  GOCACHE: /tmp/gocache

jobs:
  quality:
    name: Code quality and mod files up to date
    runs-on: ubuntu-latest
    container: ubuntu:devel
    strategy:
      matrix:
        go: [ '1.15' ]
    steps:
      - name: Cache GOCACHE
        id: cache-gocache
        uses: actions/cache@v2
        with:
          path: ${{ env.GOCACHE }}
          key: gocache-${{ github.job }}
      - name: Cache APT
        uses: actions/cache@v2
        with:
          path: /var/cache/apt
          key: apt-${{ github.job }}
      - name: No Cache HIT?
        if: steps.cache-gocache.outputs.cache-hit != 'true'
        run: echo "CACHE MISS"
      - name: Cache HIT?
        if: steps.cache-gocache.outputs.cache-hit == 'true'
        run: echo "CACHE HIT"
      # We install git before checkouting so that actions/checkout use the git command and persists .git/ thus
      - name: Install dependencies
        run: |
          find /var/cache/apt
          apt update
          DEBIAN_FRONTEND=noninteractive apt install -y ca-certificates git gcc libsmbclient-dev
          find /tmp/gocache
          echo "XXXXXXXXXXXXXXXXXXXX"
          find /var/cache/apt
      - uses: actions/checkout@v2
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}
      - name: Code formatting
        run: |
          FMT=`go fmt ./...`
          echo "$FMT"
          [ -z "$FMT" ]
      - name: Go vet
        run: go vet ./...
        if: ${{ always() }}
      - name: Module files are up to date
        run: ./.github/ci/check-modules
        if: ${{ always() }}
      - name: Building
        run: go build ./...
        if: ${{ always() }}

  tests:
    name: Tests
    runs-on: ubuntu-latest
    container: ubuntu:devel
    strategy:
      matrix:
        go: [ '1.15' ]
    steps:
      - uses: actions/checkout@v2
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}
      # We add a new user and execute under it for file permissions to be taken into account
      # as root can write in RO directories.
      - name: Install dependencies and add user
        run: |
          apt update
          DEBIAN_FRONTEND=noninteractive apt install -y ca-certificates gcc gettext libsmbclient-dev samba sudo dconf-cli
          adduser --disabled-password --gecos "" ubuntu
      - name: Run tests
        run: sudo -u ubuntu env "PATH=$PATH" go test -coverprofile=/tmp/coverage.txt -covermode=count ./...
      - name: Run tests (with race detector)
        run: sudo -u ubuntu env "PATH=$PATH" go test -race ./...
      - name: Install curl for codecov
        run: |
          apt update
          DEBIAN_FRONTEND=noninteractive apt install -y curl
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          file: /tmp/coverage.txt

  generators:
    name: Generated files are up to date
    runs-on: ubuntu-latest
    container: ubuntu:latest
    steps:
      # Add dependencies
      - name: Install dependencies
        run: |
          apt update
          DEBIAN_FRONTEND=noninteractive apt install -y ca-certificates gcc protobuf-compiler gettext git libsmbclient-dev
      - uses: actions/checkout@v2
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: '1.15'
      - name: Install go grpc protoc generator
        run: |
          cd ..
          GO111MODULE=on go get google.golang.org/protobuf/cmd/protoc-gen-go@latest \
            google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          cd -
      - name: Check generated files
        run: ./.github/ci/check-generate
