name: QA
on:
  push:
    branches:
    - main
  pull_request:

env:
  goversion: '1.16'

jobs:
  quality:
    name: Code quality and mod files up to date
    runs-on: ubuntu-latest
    container: ubuntu:devel
    steps:
      # We install git before checkouting so that actions/checkout use the git command and persists .git/ thus
      - name: Install dependencies
        run: |
          apt update
          DEBIAN_FRONTEND=noninteractive apt install -y ca-certificates git gcc libsmbclient-dev
      - uses: actions/checkout@v2
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.goversion }}
      - name: Code formatting
        run: |
          FMT=`go fmt ./...`
          echo "$FMT"
          [ -z "$FMT" ]
      - name: Go vet
        run: go vet ./...
        if: ${{ always() }}
      - name: Install static checker
        run: |
          go install honnef.co/go/tools/cmd/staticcheck
        if: ${{ always() }}
      - name: Staticcheck
        run: staticcheck ./...
        if: ${{ always() }}
      - name: Gosec Security Scanner
        run: |
          # Run manually here due to GOROOT issue.
          export PATH=$PATH:$(go env GOPATH)/bin
          go get github.com/securego/gosec/cmd/gosec
          gosec ./...
        if: ${{ always() }}
      - name: Module files are up to date
        run: |
          go mod tidy
          ./.github/ci/check-modules
        if: ${{ always() }}
      - name: Building
        run: go build ./...
        if: ${{ always() }}

  tests:
    name: Tests
    runs-on: ubuntu-latest
    container: ubuntu:rolling
    steps:
      - uses: actions/checkout@v2
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.goversion }}
      # We add a new user and execute under it for file permissions to be taken into account
      # as root can write in RO directories.
      - name: Install dependencies and add user
        run: |
          apt update
          DEBIAN_FRONTEND=noninteractive apt install -y ca-certificates gcc gettext libsmbclient-dev samba sudo dconf-cli
          adduser --disabled-password --gecos "" ubuntu
      - name: Run tests
        run: sudo -u ubuntu env "PATH=$PATH" go test -coverprofile=/tmp/coverage.txt -covermode=count ./...
      - name: Run tests (with race detector)
        run: sudo -u ubuntu env "PATH=$PATH" go test -race ./...
      - name: Install curl for codecov
        run: |
          apt update
          DEBIAN_FRONTEND=noninteractive apt install -y curl
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          file: /tmp/coverage.txt

  generators:
    name: Generated files are up to date
    runs-on: ubuntu-latest
    container: ubuntu:latest
    steps:
      # Add dependencies
      - name: Install dependencies
        run: |
          apt update
          DEBIAN_FRONTEND=noninteractive apt install -y ca-certificates gcc protobuf-compiler gettext git libsmbclient-dev
      - uses: actions/checkout@v2
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.goversion }}
      - name: Install go grpc protoc generator
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go \
            google.golang.org/grpc/cmd/protoc-gen-go-grpc
      - name: Check generated files
        run: ./.github/ci/check-generate
